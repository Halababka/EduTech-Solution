generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  first_name       String
  middle_name      String?
  last_name        String
  username         String         @unique
  password         String?
  email            String?        @unique
  lastLogin        DateTime?      @updatedAt
  avatar           String?
  about            String?
  role             Roles          @relation(fields: [rolesId], references: [id])
  materials        Materials[]
  rolesId          Int            @default(1)
  groups           Groups[]
  enrolled_courses Courses[]      @relation("EnrolledCourses")
  courses_owned    Courses[]      @relation("CoursesOwners")
  TestAssign       TestAssign[]
  TestTemplate     TestTemplate[]
  TestSettings     TestSettings[]
}

model Roles {
  id          Int           @id @default(autoincrement())
  code        String        @unique
  name        String        @unique
  User        User[]
  permissions Permissions[]
}

model Permissions {
  id    Int     @id @default(autoincrement())
  code  String  @unique
  name  String  @unique
  roles Roles[]
}

model Groups {
  id           Int      @id @default(autoincrement())
  full_name    String   @unique // Полное название группы
  abbreviation String?  @map("abbr") // Сокращенное название группы
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  parent       Groups?  @relation("parentId", fields: [parentId], references: [id])
  subgroups    Groups[] @relation("parentId")
  parentId     Int?
  users        User[]
}

model Categories {
  id      Int       @id @default(autoincrement())
  name    String
  courses Courses[]
}

model Courses {
  id                Int          @id @default(autoincrement())
  name              String
  description       String?
  image_url         String?
  active            Boolean      @default(true)
  sections          Sections[]
  materials         Materials[]
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
  starts_at         DateTime     @default(now()) @db.Date
  ends_at           DateTime?    @db.Date
  categories        Categories[]
  duration_hours    Int? // Количество часов
  course_owners     User[]       @relation("CoursesOwners")
  enrolled_students User[]       @relation("EnrolledCourses")
}

model Sections {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  unlocks_at      DateTime
  materials       Materials[]
  parent          Sections?         @relation("parentId", fields: [parentId], references: [id])
  subsections     Sections[]        @relation("parentId")
  parentId        Int?
  Courses         Courses?          @relation(fields: [coursesId], references: [id])
  coursesId       Int?
  section_content SectionContents[]
}

model SectionContents {
  id         Int         @id @default(autoincrement())
  title      String?
  content    String?
  materials  Materials[]
  sectioins  Sections    @relation(fields: [sectionsId], references: [id])
  sectionsId Int
}

model Materials {
  id               Int               @id @default(autoincrement())
  name             String
  description      String?
  mime_type        String?
  key              String
  path             String
  owner            User              @relation(fields: [userId], references: [id])
  size             Int?
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  sections         Sections[]
  courses          Courses[]
  userId           Int
  section_contents SectionContents[]
}

// Тестирование:

model Subject {
  id             Int           @id @default(autoincrement())
  name           String
  questions      Question[]
  parent         Subject?      @relation("ParentChild", fields: [parentId], references: [id])
  parentId       Int?
  TestTemplate   TestTemplate? @relation(fields: [testTemplateId], references: [id])
  testTemplateId Int?
  children       Subject[]     @relation("ParentChild")
}

model Question {
  id       Int           @id @default(autoincrement())
  text     String
  type     QuestionTypes @default(ONE_ANSWER)
  subjects Subject[]
  answers  Answer[]
  level    Int?
}

model Answer {
  id         Int         @id @default(autoincrement())
  content    String
  type       AnswerTypes
  correct    Boolean     @default(false)
  Question   Question    @relation(fields: [questionId], references: [id])
  questionId Int
}

model TestTemplate {
  id         Int          @id @default(autoincrement())
  name       String
  author     User         @relation(fields: [authorId], references: [id])
  authorId   Int
  TestAssign TestAssign[]
  subjects   Subject[]
}

model TestSettings {
  id                Int              @id @default(autoincrement())
  name              String
  author            User             @relation(fields: [authorId], references: [id])
  authorId          Int
  startTime         DateTime?
  endTime           DateTime?
  duration          Int?
  attemptsCount     Int?
  assessmentMethod  AssessmentMethod @default(ADAPTIVE)
  initialDifficulty Int?
  TestAssign        TestAssign[]
}

model TestAssign {
  id             Int          @id @default(autoincrement())
  name           String
  author         User         @relation(fields: [authorId], references: [id])
  authorId       Int
  testTemplate   TestTemplate @relation(fields: [testTemplateId], references: [id])
  testTemplateId Int
  testSettings   TestSettings @relation(fields: [testSettingsId], references: [id])
  testSettingsId Int
}

enum QuestionTypes {
  ONE_ANSWER
  MANY_ANSWERS
  TEXT_ANSWER
}

enum AnswerTypes {
  TEXT
  IMAGE
  RICH
}

enum AssessmentMethod {
  ADAPTIVE
  STATISTICAL
}
