generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int         @id @default(autoincrement())
  first_name       String
  middle_name      String?
  last_name        String
  username         String      @unique
  password         String?
  about            String?
  role             Roles       @relation(fields: [rolesId], references: [id])
  materials        Materials[]
  rolesId          Int         @default(1)
  groups           Groups[]
  enrolled_courses Courses[]   @relation("EnrolledCourses")
  courses_owned    Courses[]   @relation("CoursesOwners")
}

model Roles {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  User        User[]
  permissions Permissions[]
}

model Permissions {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  roles Roles[]
}

model Groups {
  id           Int      @id @default(autoincrement())
  full_name    String   @unique // Полное название группы
  abbreviation String?  @map("abbr") // Сокращенное название группы
  create_at    DateTime @default(now())
  updated_at   DateTime @updatedAt
  users        User[]
}

model Categories {
  id      Int       @id @default(autoincrement())
  name    String
  courses Courses[]
}

model Courses {
  id                Int          @id @default(autoincrement())
  name              String
  description       String?
  image_url         String?      @default("https://s3.aeza.cloud/productive-girls/no_course_photo.png")
  active            Boolean      @default(true)
  chapters          Chapters[]
  materials         Materials[]
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
  starts_at         DateTime
  ends_at           DateTime?
  categories        Categories[]
  duration_days     Int? // Количество дней для освоения курса
  course_owners     User[]       @relation("CoursesOwners")
  enrolled_students User[]       @relation("EnrolledCourses")
}

model Chapters {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  unlocks_at  DateTime
  materials   Materials[]
  Courses     Courses?    @relation(fields: [coursesId], references: [id])
  coursesId   Int?
}

model Materials {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  mime_type   String?
  key         String
  path        String
  owner       User       @relation(fields: [userId], references: [id])
  size        Int?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  chapters    Chapters[]
  courses     Courses[]
  userId      Int
}

// Тестирование:

model Subject {
  id       Int        @id @default(autoincrement())
  name     String
  Question Question[]
}

model Question {
  id        Int           @id @default(autoincrement())
  name      String
  subject   Subject?      @relation(fields: [subjectId], references: [id])
  type      QuestionTypes @default(ONE_ANSWER)
  subjectId Int?
}

model Answer {
  id   Int    @id @default(autoincrement())
  name String
}

enum QuestionTypes {
  ONE_ANSWER
  MANY_ANSWERS
  TEXT_ANSWER
}
